using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Identity.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Hosting;

var builder = WebApplication.CreateBuilder(args);

// ðŸ”¹ 1. LÃ¤gg till databasanslutning
builder.Services.AddDbContext<ApplicationDbContext>(options =>
    options.UseSqlServer(builder.Configuration.GetConnectionString("DefaultConnection")));

// ðŸ”¹ 2. LÃ¤gg till ASP.NET Identity
builder.Services.AddIdentity<ApplicationUser, IdentityRole>()
    .AddEntityFrameworkStores<ApplicationDbContext>()
    .AddDefaultTokenProviders(); // âœ… Detta behÃ¶vs fÃ¶r exempelvis e-postverifiering

// ðŸ”¹ 3. LÃ¤gg till MVC och Razor Pages
builder.Services.AddControllersWithViews();
builder.Services.AddRazorPages();

var app = builder.Build();

// ðŸ”¹ 4. Middleware fÃ¶r felhantering
if (!app.Environment.IsDevelopment())
{
    app.UseExceptionHandler("/Home/Error");
    app.UseHsts();
}

// ðŸ”¹ 5. Middleware fÃ¶r att hantera HTTP-fÃ¶rfrÃ¥gningar
//app.UseHttpsRedirection();
app.UseStaticFiles();
app.UseRouting();

app.UseAuthentication(); // âœ… MÃ¥ste finnas fÃ¶r att Identity ska fungera!
app.UseAuthorization();

// ðŸ”¹ 6. Mappar MVC och Identity
app.MapControllerRoute(
    name: "default",
    pattern: "{controller=Home}/{action=Index}/{id?}");
// âœ… KrÃ¤vs fÃ¶r Identity-standardvyer (t.ex. inloggning)

app.Run();

// dotnet watch run
// Control + C FÃ¶r att den ska stoppas

