// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MotionConnect.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250510143211_UpdateKommentarModelk")]
    partial class UpdateKommentarModelk
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AnvandareSport", b =>
                {
                    b.Property<string>("AnvandarId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("SportId")
                        .HasColumnType("int");

                    b.HasKey("AnvandarId", "SportId");

                    b.HasIndex("SportId");

                    b.ToTable("AnvandareSporter");
                });

            modelBuilder.Entity("ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<bool>("ArProfilOppen")
                        .HasColumnType("bit");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EfterNamn")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<DateTime>("FodelsAr")
                        .HasColumnType("datetime2");

                    b.Property<string>("ForNamn")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ProfilBildUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Chat", b =>
                {
                    b.Property<int>("ChatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ChatId"));

                    b.Property<bool>("ArGruppChat")
                        .HasColumnType("bit");

                    b.Property<string>("GroupName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("SkapadTid")
                        .HasColumnType("datetime2");

                    b.HasKey("ChatId");

                    b.ToTable("Chattar");
                });

            modelBuilder.Entity("Gillning", b =>
                {
                    b.Property<int>("GillingsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GillingsId"));

                    b.Property<string>("AnvandarId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AnvandareId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("InlaggId")
                        .HasColumnType("int");

                    b.Property<int?>("KommentarId")
                        .HasColumnType("int");

                    b.HasKey("GillingsId");

                    b.HasIndex("AnvandareId");

                    b.HasIndex("InlaggId");

                    b.HasIndex("KommentarId");

                    b.ToTable("Gillningar");
                });

            modelBuilder.Entity("Grupp", b =>
                {
                    b.Property<int>("GruppId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GruppId"));

                    b.Property<string>("GruppNamn")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("SkapadesTid")
                        .HasColumnType("datetime2");

                    b.HasKey("GruppId");

                    b.ToTable("Grupper");
                });

            modelBuilder.Entity("GruppMedlem", b =>
                {
                    b.Property<int>("GruppId")
                        .HasColumnType("int");

                    b.Property<string>("AnvandarId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("GruppMedlemId")
                        .HasColumnType("int");

                    b.HasKey("GruppId", "AnvandarId");

                    b.HasIndex("AnvandarId");

                    b.ToTable("GruppMedlemmar");
                });

            modelBuilder.Entity("Inlagg", b =>
                {
                    b.Property<int>("InlaggId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InlaggId"));

                    b.Property<string>("AnvandarId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AnvandareId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BildUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("SkapadesTid")
                        .HasColumnType("datetime2");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("InlaggId");

                    b.HasIndex("AnvandareId");

                    b.ToTable("Inlagg");
                });

            modelBuilder.Entity("InlaggSport", b =>
                {
                    b.Property<int>("InlaggId")
                        .HasColumnType("int");

                    b.Property<int>("SportId")
                        .HasColumnType("int");

                    b.HasKey("InlaggId", "SportId");

                    b.HasIndex("SportId");

                    b.ToTable("InlaggSporter");
                });

            modelBuilder.Entity("Kommentar", b =>
                {
                    b.Property<int>("KommentarId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("KommentarId"));

                    b.Property<string>("AnvandareId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("InlaggId")
                        .HasColumnType("int");

                    b.Property<DateTime>("SkapadTid")
                        .HasColumnType("datetime2");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("KommentarId");

                    b.HasIndex("AnvandareId");

                    b.HasIndex("InlaggId");

                    b.ToTable("Kommentarer");
                });

            modelBuilder.Entity("Meddelande", b =>
                {
                    b.Property<int>("MeddelandeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MeddelandeId"));

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AvsandareId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ChatId")
                        .HasColumnType("int");

                    b.Property<DateTime>("SkapadesTid")
                        .HasColumnType("datetime2");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MeddelandeId");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("AvsandareId");

                    b.HasIndex("ChatId");

                    b.ToTable("Meddelanden");
                });

            modelBuilder.Entity("MeddelandeMottagare", b =>
                {
                    b.Property<int>("MeddelandeMottagreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MeddelandeMottagreId"));

                    b.Property<int>("MeddelandeId")
                        .HasColumnType("int");

                    b.Property<string>("MottagareId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("MeddelandeMottagreId");

                    b.HasIndex("MeddelandeId");

                    b.HasIndex("MottagareId");

                    b.ToTable("MeddelandeMottagare");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Notis", b =>
                {
                    b.Property<int>("NotisId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NotisId"));

                    b.Property<string>("AnvandarId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("ArLast")
                        .HasColumnType("bit");

                    b.Property<string>("AvsandareId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("InlaggId")
                        .HasColumnType("int");

                    b.Property<string>("Meddelande")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MeddelandeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("SkapadesTid")
                        .HasColumnType("datetime2");

                    b.Property<int>("Typ")
                        .HasColumnType("int");

                    b.HasKey("NotisId");

                    b.HasIndex("AnvandarId");

                    b.HasIndex("AvsandareId");

                    b.HasIndex("InlaggId");

                    b.ToTable("Notiser");
                });

            modelBuilder.Entity("Sport", b =>
                {
                    b.Property<int>("SportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SportId"));

                    b.Property<string>("Namn")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SportId");

                    b.ToTable("Sporter");
                });

            modelBuilder.Entity("Van", b =>
                {
                    b.Property<string>("AnvandarId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("VanId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("AnvandarId", "VanId");

                    b.HasIndex("VanId");

                    b.ToTable("Vanner");
                });

            modelBuilder.Entity("VanForFragan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("ArGodkand")
                        .HasColumnType("bit");

                    b.Property<string>("AvsandareId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("MottagareId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Skickades")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AvsandareId");

                    b.HasIndex("MottagareId");

                    b.ToTable("Vanforfrågningar");
                });

            modelBuilder.Entity("AnvandareSport", b =>
                {
                    b.HasOne("ApplicationUser", "Anvandare")
                        .WithMany("AnvandareSporter")
                        .HasForeignKey("AnvandarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sport", "Sport")
                        .WithMany("AnvandareSporter")
                        .HasForeignKey("SportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Anvandare");

                    b.Navigation("Sport");
                });

            modelBuilder.Entity("Gillning", b =>
                {
                    b.HasOne("ApplicationUser", "Anvandare")
                        .WithMany("Gillningar")
                        .HasForeignKey("AnvandareId");

                    b.HasOne("Inlagg", "Inlagg")
                        .WithMany("Gillningar")
                        .HasForeignKey("InlaggId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Kommentar", "Kommentar")
                        .WithMany("Gillningar")
                        .HasForeignKey("KommentarId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Anvandare");

                    b.Navigation("Inlagg");

                    b.Navigation("Kommentar");
                });

            modelBuilder.Entity("GruppMedlem", b =>
                {
                    b.HasOne("ApplicationUser", "Anvandare")
                        .WithMany("GruppMedlemskap")
                        .HasForeignKey("AnvandarId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Grupp", "Grupp")
                        .WithMany("GruppMedlemmar")
                        .HasForeignKey("GruppId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Anvandare");

                    b.Navigation("Grupp");
                });

            modelBuilder.Entity("Inlagg", b =>
                {
                    b.HasOne("ApplicationUser", "Anvandare")
                        .WithMany("Inlagg")
                        .HasForeignKey("AnvandareId");

                    b.Navigation("Anvandare");
                });

            modelBuilder.Entity("InlaggSport", b =>
                {
                    b.HasOne("Inlagg", "Inlagg")
                        .WithMany("InlaggSporter")
                        .HasForeignKey("InlaggId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sport", "Sport")
                        .WithMany("InlaggSporter")
                        .HasForeignKey("SportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Inlagg");

                    b.Navigation("Sport");
                });

            modelBuilder.Entity("Kommentar", b =>
                {
                    b.HasOne("ApplicationUser", "Anvandare")
                        .WithMany("Kommentarer")
                        .HasForeignKey("AnvandareId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Inlagg", "Inlagg")
                        .WithMany("Kommentarer")
                        .HasForeignKey("InlaggId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Anvandare");

                    b.Navigation("Inlagg");
                });

            modelBuilder.Entity("Meddelande", b =>
                {
                    b.HasOne("ApplicationUser", null)
                        .WithMany("Meddelanden")
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("ApplicationUser", "Avsandare")
                        .WithMany()
                        .HasForeignKey("AvsandareId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Chat", "Chat")
                        .WithMany("Meddelanden")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Avsandare");

                    b.Navigation("Chat");
                });

            modelBuilder.Entity("MeddelandeMottagare", b =>
                {
                    b.HasOne("Meddelande", "Meddelande")
                        .WithMany("Mottagare")
                        .HasForeignKey("MeddelandeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApplicationUser", "Mottagare")
                        .WithMany()
                        .HasForeignKey("MottagareId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Meddelande");

                    b.Navigation("Mottagare");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Notis", b =>
                {
                    b.HasOne("ApplicationUser", "Anvandare")
                        .WithMany("Notiser")
                        .HasForeignKey("AnvandarId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ApplicationUser", "Avsandare")
                        .WithMany()
                        .HasForeignKey("AvsandareId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Inlagg", "Inlagg")
                        .WithMany()
                        .HasForeignKey("InlaggId");

                    b.Navigation("Anvandare");

                    b.Navigation("Avsandare");

                    b.Navigation("Inlagg");
                });

            modelBuilder.Entity("Van", b =>
                {
                    b.HasOne("ApplicationUser", "Anvandare")
                        .WithMany("Vanner")
                        .HasForeignKey("AnvandarId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ApplicationUser", "VanAnvandare")
                        .WithMany()
                        .HasForeignKey("VanId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Anvandare");

                    b.Navigation("VanAnvandare");
                });

            modelBuilder.Entity("VanForFragan", b =>
                {
                    b.HasOne("ApplicationUser", "Avsandare")
                        .WithMany()
                        .HasForeignKey("AvsandareId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ApplicationUser", "Mottagare")
                        .WithMany()
                        .HasForeignKey("MottagareId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Avsandare");

                    b.Navigation("Mottagare");
                });

            modelBuilder.Entity("ApplicationUser", b =>
                {
                    b.Navigation("AnvandareSporter");

                    b.Navigation("Gillningar");

                    b.Navigation("GruppMedlemskap");

                    b.Navigation("Inlagg");

                    b.Navigation("Kommentarer");

                    b.Navigation("Meddelanden");

                    b.Navigation("Notiser");

                    b.Navigation("Vanner");
                });

            modelBuilder.Entity("Chat", b =>
                {
                    b.Navigation("Meddelanden");
                });

            modelBuilder.Entity("Grupp", b =>
                {
                    b.Navigation("GruppMedlemmar");
                });

            modelBuilder.Entity("Inlagg", b =>
                {
                    b.Navigation("Gillningar");

                    b.Navigation("InlaggSporter");

                    b.Navigation("Kommentarer");
                });

            modelBuilder.Entity("Kommentar", b =>
                {
                    b.Navigation("Gillningar");
                });

            modelBuilder.Entity("Meddelande", b =>
                {
                    b.Navigation("Mottagare");
                });

            modelBuilder.Entity("Sport", b =>
                {
                    b.Navigation("AnvandareSporter");

                    b.Navigation("InlaggSporter");
                });
#pragma warning restore 612, 618
        }
    }
}
